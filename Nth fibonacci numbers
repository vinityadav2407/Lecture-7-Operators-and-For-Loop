Problem statement:-
The n-th term of Fibonacci series F(n), where F(n) is a function, is calculated using the following formula -
  F(n) = F(n - 1) + F(n - 2), 
    Where, F(1) = 1, F(2) = 1
Provided 'n' you have to find out the n-th Fibonacci Number. Handle edges cases like when 'n' = 1 or 'n' = 2 by using conditionals like if else and return what's expected.
"Indexing is start from 1"
Example :
Input: 6
Output: 8

Explanation: The number is ‘6’ so we have to find the “6th” Fibonacci number.
So by using the given formula of the Fibonacci series, we get the series:    
[ 1, 1, 2, 3, 5, 8, 13, 21]
So the “6th” element is “8” hence we get the output.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
6
Sample Output 1:
8
>>>>>>
>>>>>
Solution:->>>
import java.util.Scanner;
public class Solution {


	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/
Scanner s=new Scanner(System.in);
int n=s.nextInt();
System.out.println(fib(n));
		
	}
	static int fib(int n){
		if(n==0){
			return 0;
		}
		else if(n==1||n==2){
			return 1;
		}
		return(fib(n-1)+fib(n-2));
	}

}
